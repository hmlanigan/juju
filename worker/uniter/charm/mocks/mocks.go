// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/uniter/charm (interfaces: CharmReader,CharmInfo,CharmArchive)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	charm "github.com/juju/charm/v8"
	set "github.com/juju/collections/set"
	charm0 "github.com/juju/juju/worker/uniter/charm"
)

// MockCharmReader is a mock of CharmReader interface.
type MockCharmReader struct {
	ctrl     *gomock.Controller
	recorder *MockCharmReaderMockRecorder
}

// MockCharmReaderMockRecorder is the mock recorder for MockCharmReader.
type MockCharmReaderMockRecorder struct {
	mock *MockCharmReader
}

// NewMockCharmReader creates a new mock instance.
func NewMockCharmReader(ctrl *gomock.Controller) *MockCharmReader {
	mock := &MockCharmReader{ctrl: ctrl}
	mock.recorder = &MockCharmReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmReader) EXPECT() *MockCharmReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockCharmReader) Read(arg0 charm0.CharmInfo, arg1 <-chan struct{}) (charm0.CharmArchive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(charm0.CharmArchive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockCharmReaderMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCharmReader)(nil).Read), arg0, arg1)
}

// MockCharmInfo is a mock of CharmInfo interface.
type MockCharmInfo struct {
	ctrl     *gomock.Controller
	recorder *MockCharmInfoMockRecorder
}

// MockCharmInfoMockRecorder is the mock recorder for MockCharmInfo.
type MockCharmInfoMockRecorder struct {
	mock *MockCharmInfo
}

// NewMockCharmInfo creates a new mock instance.
func NewMockCharmInfo(ctrl *gomock.Controller) *MockCharmInfo {
	mock := &MockCharmInfo{ctrl: ctrl}
	mock.recorder = &MockCharmInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmInfo) EXPECT() *MockCharmInfoMockRecorder {
	return m.recorder
}

// ArchiveSha256 mocks base method.
func (m *MockCharmInfo) ArchiveSha256() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveSha256")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveSha256 indicates an expected call of ArchiveSha256.
func (mr *MockCharmInfoMockRecorder) ArchiveSha256() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveSha256", reflect.TypeOf((*MockCharmInfo)(nil).ArchiveSha256))
}

// URL mocks base method.
func (m *MockCharmInfo) URL() *charm.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(*charm.URL)
	return ret0
}

// URL indicates an expected call of URL.
func (mr *MockCharmInfoMockRecorder) URL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockCharmInfo)(nil).URL))
}

// MockCharmArchive is a mock of CharmArchive interface.
type MockCharmArchive struct {
	ctrl     *gomock.Controller
	recorder *MockCharmArchiveMockRecorder
}

// MockCharmArchiveMockRecorder is the mock recorder for MockCharmArchive.
type MockCharmArchiveMockRecorder struct {
	mock *MockCharmArchive
}

// NewMockCharmArchive creates a new mock instance.
func NewMockCharmArchive(ctrl *gomock.Controller) *MockCharmArchive {
	mock := &MockCharmArchive{ctrl: ctrl}
	mock.recorder = &MockCharmArchiveMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmArchive) EXPECT() *MockCharmArchiveMockRecorder {
	return m.recorder
}

// ArchiveMembers mocks base method.
func (m *MockCharmArchive) ArchiveMembers() (set.Strings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveMembers")
	ret0, _ := ret[0].(set.Strings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveMembers indicates an expected call of ArchiveMembers.
func (mr *MockCharmArchiveMockRecorder) ArchiveMembers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveMembers", reflect.TypeOf((*MockCharmArchive)(nil).ArchiveMembers))
}

// ExpandTo mocks base method.
func (m *MockCharmArchive) ExpandTo(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandTo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpandTo indicates an expected call of ExpandTo.
func (mr *MockCharmArchiveMockRecorder) ExpandTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandTo", reflect.TypeOf((*MockCharmArchive)(nil).ExpandTo), arg0)
}
